var Code=require("code"),Lab=require("lab"),Qs=require("../"),internals={},lab=exports.lab=Lab.script(),expect=Code.expect,describe=lab.experiment,it=lab.test;
describe("stringify()",function(){it("stringifies a querystring object",function(a){expect(Qs.stringify({a:"b"})).to.equal("a=b");expect(Qs.stringify({a:1})).to.equal("a=1");expect(Qs.stringify({a:1,b:2})).to.equal("a=1&b=2");expect(Qs.stringify({a:"A_Z"})).to.equal("a=A_Z");expect(Qs.stringify({a:"\u20ac"})).to.equal("a=%E2%82%AC");expect(Qs.stringify({a:"\ue000"})).to.equal("a=%EE%80%80");expect(Qs.stringify({a:"\u05d0"})).to.equal("a=%D7%90");expect(Qs.stringify({a:"\ud801\udc37"})).to.equal("a=%F0%90%90%B7");
a()});it("stringifies a nested object",function(a){expect(Qs.stringify({a:{b:"c"}})).to.equal("a%5Bb%5D=c");expect(Qs.stringify({a:{b:{c:{d:"e"}}}})).to.equal("a%5Bb%5D%5Bc%5D%5Bd%5D=e");a()});it("stringifies an array value",function(a){expect(Qs.stringify({a:["b","c","d"]})).to.equal("a%5B0%5D=b&a%5B1%5D=c&a%5B2%5D=d");a()});it("omits array indices when asked",function(a){expect(Qs.stringify({a:["b","c","d"]},{indices:!1})).to.equal("a=b&a=c&a=d");a()});it("stringifies a nested array value",function(a){expect(Qs.stringify({a:{b:["c",
"d"]}})).to.equal("a%5Bb%5D%5B0%5D=c&a%5Bb%5D%5B1%5D=d");a()});it("stringifies an object inside an array",function(a){expect(Qs.stringify({a:[{b:"c"}]})).to.equal("a%5B0%5D%5Bb%5D=c");expect(Qs.stringify({a:[{b:{c:[1]}}]})).to.equal("a%5B0%5D%5Bb%5D%5Bc%5D%5B0%5D=1");a()});it("does not omit object keys when indices = false",function(a){expect(Qs.stringify({a:[{b:"c"}]},{indices:!1})).to.equal("a%5Bb%5D=c");a()});it("uses indices notation for arrays when indices=true",function(a){expect(Qs.stringify({a:["b",
"c"]},{indices:!0})).to.equal("a%5B0%5D=b&a%5B1%5D=c");a()});it("uses indices notation for arrays when no arrayFormat is specified",function(a){expect(Qs.stringify({a:["b","c"]})).to.equal("a%5B0%5D=b&a%5B1%5D=c");a()});it("uses indices notation for arrays when no arrayFormat=indices",function(a){expect(Qs.stringify({a:["b","c"]},{arrayFormat:"indices"})).to.equal("a%5B0%5D=b&a%5B1%5D=c");a()});it("uses repeat notation for arrays when no arrayFormat=repeat",function(a){expect(Qs.stringify({a:["b",
"c"]},{arrayFormat:"repeat"})).to.equal("a=b&a=c");a()});it("uses brackets notation for arrays when no arrayFormat=brackets",function(a){expect(Qs.stringify({a:["b","c"]},{arrayFormat:"brackets"})).to.equal("a%5B%5D=b&a%5B%5D=c");a()});it("stringifies a complicated object",function(a){expect(Qs.stringify({a:{b:"c",d:"e"}})).to.equal("a%5Bb%5D=c&a%5Bd%5D=e");a()});it("stringifies an empty value",function(a){expect(Qs.stringify({a:""})).to.equal("a=");expect(Qs.stringify({a:null},{strictNullHandling:!0})).to.equal("a");
expect(Qs.stringify({a:"",b:""})).to.equal("a=&b=");expect(Qs.stringify({a:null,b:""},{strictNullHandling:!0})).to.equal("a&b=");expect(Qs.stringify({a:{b:""}})).to.equal("a%5Bb%5D=");expect(Qs.stringify({a:{b:null}},{strictNullHandling:!0})).to.equal("a%5Bb%5D");expect(Qs.stringify({a:{b:null}},{strictNullHandling:!1})).to.equal("a%5Bb%5D=");a()});it("stringifies an empty object",function(a){var b=Object.create(null);b.a="b";expect(Qs.stringify(b)).to.equal("a=b");a()});it("returns an empty string for invalid input",
function(a){expect(Qs.stringify(void 0)).to.equal("");expect(Qs.stringify(!1)).to.equal("");expect(Qs.stringify(null)).to.equal("");expect(Qs.stringify("")).to.equal("");a()});it("stringifies an object with an empty object as a child",function(a){var b={a:Object.create(null)};b.a.b="c";expect(Qs.stringify(b)).to.equal("a%5Bb%5D=c");a()});it("drops keys with a value of undefined",function(a){expect(Qs.stringify({a:void 0})).to.equal("");expect(Qs.stringify({a:{b:void 0,c:null}},{strictNullHandling:!0})).to.equal("a%5Bc%5D");
expect(Qs.stringify({a:{b:void 0,c:null}},{strictNullHandling:!1})).to.equal("a%5Bc%5D=");expect(Qs.stringify({a:{b:void 0,c:""}})).to.equal("a%5Bc%5D=");a()});it("url encodes values",function(a){expect(Qs.stringify({a:"b c"})).to.equal("a=b%20c");a()});it("stringifies a date",function(a){var b=new Date,c="a="+encodeURIComponent(b.toISOString());expect(Qs.stringify({a:b})).to.equal(c);a()});it("stringifies the weird object from qs",function(a){expect(Qs.stringify({"my weird field":"~q1!2\"'w$5&7/z8)?"})).to.equal("my%20weird%20field=~q1%212%22%27w%245%267%2Fz8%29%3F");
a()});it("skips properties that are part of the object prototype",function(a){Object.prototype.crash="test";expect(Qs.stringify({a:"b"})).to.equal("a=b");expect(Qs.stringify({a:{b:"c"}})).to.equal("a%5Bb%5D=c");delete Object.prototype.crash;a()});it("stringifies boolean values",function(a){expect(Qs.stringify({a:!0})).to.equal("a=true");expect(Qs.stringify({a:{b:!0}})).to.equal("a%5Bb%5D=true");expect(Qs.stringify({b:!1})).to.equal("b=false");expect(Qs.stringify({b:{c:!1}})).to.equal("b%5Bc%5D=false");
a()});it("stringifies buffer values",function(a){expect(Qs.stringify({a:new Buffer("test")})).to.equal("a=test");expect(Qs.stringify({a:{b:new Buffer("test")}})).to.equal("a%5Bb%5D=test");a()});it("stringifies an object using an alternative delimiter",function(a){expect(Qs.stringify({a:"b",c:"d"},{delimiter:";"})).to.equal("a=b;c=d");a()});it("doesn't blow up when Buffer global is missing",function(a){var b=global.Buffer;delete global.Buffer;expect(Qs.stringify({a:"b",c:"d"})).to.equal("a=b&c=d");
global.Buffer=b;a()});it("selects properties when filter=array",function(a){expect(Qs.stringify({a:"b"},{filter:["a"]})).to.equal("a=b");expect(Qs.stringify({a:1},{filter:[]})).to.equal("");expect(Qs.stringify({a:{b:[1,2,3,4],c:"d"},c:"f"},{filter:["a","b",0,2]})).to.equal("a%5Bb%5D%5B0%5D=1&a%5Bb%5D%5B2%5D=3");a()});it("supports custom representations when filter=function",function(a){var b=0,c={a:"b",c:"d",e:{f:new Date(1257894E6)}};expect(Qs.stringify(c,{filter:function(a,d){b++;if(1===b)expect(a).to.be.empty(),
expect(d).to.equal(c);else{if("c"===a)return;if(d instanceof Date)return expect(a).to.equal("e[f]"),d.getTime()}return d}})).to.equal("a=b&e%5Bf%5D=1257894000000");expect(b).to.equal(5);a()})}); //# sourceMappingURL=stringify.js.map
