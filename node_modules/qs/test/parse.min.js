var Code=require("code"),Lab=require("lab"),Qs=require("../"),internals={},lab=exports.lab=Lab.script(),expect=Code.expect,describe=lab.experiment,it=lab.test;
describe("parse()",function(){it("parses a simple string",function(a){expect(Qs.parse("0=foo")).to.deep.equal({0:"foo"},{prototype:!1});expect(Qs.parse("foo=c++")).to.deep.equal({foo:"c  "},{prototype:!1});expect(Qs.parse("a[>=]=23")).to.deep.equal({a:{">=":"23"}},{prototype:!1});expect(Qs.parse("a[<=>]==23")).to.deep.equal({a:{"<=>":"=23"}},{prototype:!1});expect(Qs.parse("a[==]=23")).to.deep.equal({a:{"==":"23"}},{prototype:!1});expect(Qs.parse("foo",{strictNullHandling:!0})).to.deep.equal({foo:null},
{prototype:!1});expect(Qs.parse("foo")).to.deep.equal({foo:""},{prototype:!1});expect(Qs.parse("foo=")).to.deep.equal({foo:""},{prototype:!1});expect(Qs.parse("foo=bar")).to.deep.equal({foo:"bar"},{prototype:!1});expect(Qs.parse(" foo = bar = baz ")).to.deep.equal({" foo ":" bar = baz "},{prototype:!1});expect(Qs.parse("foo=bar=baz")).to.deep.equal({foo:"bar=baz"},{prototype:!1});expect(Qs.parse("foo=bar&bar=baz")).to.deep.equal({foo:"bar",bar:"baz"},{prototype:!1});expect(Qs.parse("foo2=bar2&baz2=")).to.deep.equal({foo2:"bar2",
baz2:""},{prototype:!1});expect(Qs.parse("foo=bar&baz",{strictNullHandling:!0})).to.deep.equal({foo:"bar",baz:null},{prototype:!1});expect(Qs.parse("foo=bar&baz")).to.deep.equal({foo:"bar",baz:""},{prototype:!1});expect(Qs.parse("cht=p3&chd=t:60,40&chs=250x100&chl=Hello|World")).to.deep.equal({cht:"p3",chd:"t:60,40",chs:"250x100",chl:"Hello|World"},{prototype:!1});a()});it("allows disabling dot notation",function(a){expect(Qs.parse("a.b=c")).to.deep.equal({a:{b:"c"}},{prototype:!1});expect(Qs.parse("a.b=c",
{allowDots:!1})).to.deep.equal({"a.b":"c"},{prototype:!1});a()});it("parses a single nested string",function(a){expect(Qs.parse("a[b]=c")).to.deep.equal({a:{b:"c"}},{prototype:!1});a()});it("parses a double nested string",function(a){expect(Qs.parse("a[b][c]=d")).to.deep.equal({a:{b:{c:"d"}}},{prototype:!1});a()});it("defaults to a depth of 5",function(a){expect(Qs.parse("a[b][c][d][e][f][g][h]=i")).to.deep.equal({a:{b:{c:{d:{e:{f:{"[g][h]":"i"}}}}}}},{prototype:!1});a()});it("only parses one level when depth = 1",
function(a){expect(Qs.parse("a[b][c]=d",{depth:1})).to.deep.equal({a:{b:{"[c]":"d"}}},{prototype:!1});expect(Qs.parse("a[b][c][d]=e",{depth:1})).to.deep.equal({a:{b:{"[c][d]":"e"}}},{prototype:!1});a()});it("parses a simple array",function(a){expect(Qs.parse("a=b&a=c")).to.deep.equal({a:["b","c"]},{prototype:!1});a()});it("parses an explicit array",function(a){expect(Qs.parse("a[]=b")).to.deep.equal({a:["b"]},{prototype:!1});expect(Qs.parse("a[]=b&a[]=c")).to.deep.equal({a:["b","c"]},{prototype:!1});
expect(Qs.parse("a[]=b&a[]=c&a[]=d")).to.deep.equal({a:["b","c","d"]},{prototype:!1});a()});it("parses a mix of simple and explicit arrays",function(a){expect(Qs.parse("a=b&a[]=c")).to.deep.equal({a:["b","c"]},{prototype:!1});expect(Qs.parse("a[]=b&a=c")).to.deep.equal({a:["b","c"]},{prototype:!1});expect(Qs.parse("a[0]=b&a=c")).to.deep.equal({a:["b","c"]},{prototype:!1});expect(Qs.parse("a=b&a[0]=c")).to.deep.equal({a:["b","c"]},{prototype:!1});expect(Qs.parse("a[1]=b&a=c")).to.deep.equal({a:["b",
"c"]},{prototype:!1});expect(Qs.parse("a=b&a[1]=c")).to.deep.equal({a:["b","c"]},{prototype:!1});a()});it("parses a nested array",function(a){expect(Qs.parse("a[b][]=c&a[b][]=d")).to.deep.equal({a:{b:["c","d"]}},{prototype:!1});expect(Qs.parse("a[>=]=25")).to.deep.equal({a:{">=":"25"}},{prototype:!1});a()});it("allows to specify array indices",function(a){expect(Qs.parse("a[1]=c&a[0]=b&a[2]=d")).to.deep.equal({a:["b","c","d"]},{prototype:!1});expect(Qs.parse("a[1]=c&a[0]=b")).to.deep.equal({a:["b",
"c"]},{prototype:!1});expect(Qs.parse("a[1]=c")).to.deep.equal({a:["c"]},{prototype:!1});a()});it("limits specific array indices to 20",function(a){expect(Qs.parse("a[20]=a")).to.deep.equal({a:["a"]},{prototype:!1});expect(Qs.parse("a[21]=a")).to.deep.equal({a:{21:"a"}},{prototype:!1});a()});it("supports keys that begin with a number",function(a){expect(Qs.parse("a[12b]=c")).to.deep.equal({a:{"12b":"c"}},{prototype:!1});a()});it("supports encoded = signs",function(a){expect(Qs.parse("he%3Dllo=th%3Dere")).to.deep.equal({"he=llo":"th=ere"},
{prototype:!1});a()});it("is ok with url encoded strings",function(a){expect(Qs.parse("a[b%20c]=d")).to.deep.equal({a:{"b c":"d"}},{prototype:!1});expect(Qs.parse("a[b]=c%20d")).to.deep.equal({a:{b:"c d"}},{prototype:!1});a()});it("allows brackets in the value",function(a){expect(Qs.parse('pets=["tobi"]')).to.deep.equal({pets:'["tobi"]'},{prototype:!1});expect(Qs.parse('operators=[">=", "<="]')).to.deep.equal({operators:'[">=", "<="]'},{prototype:!1});a()});it("allows empty values",function(a){expect(Qs.parse("")).to.deep.equal({},
{prototype:!1});expect(Qs.parse(null)).to.deep.equal({},{prototype:!1});expect(Qs.parse(void 0)).to.deep.equal({},{prototype:!1});a()});it("transforms arrays to objects",function(a){expect(Qs.parse("foo[0]=bar&foo[bad]=baz")).to.deep.equal({foo:{0:"bar",bad:"baz"}},{prototype:!1});expect(Qs.parse("foo[bad]=baz&foo[0]=bar")).to.deep.equal({foo:{bad:"baz",0:"bar"}},{prototype:!1});expect(Qs.parse("foo[bad]=baz&foo[]=bar")).to.deep.equal({foo:{bad:"baz",0:"bar"}},{prototype:!1});expect(Qs.parse("foo[]=bar&foo[bad]=baz")).to.deep.equal({foo:{0:"bar",
bad:"baz"}},{prototype:!1});expect(Qs.parse("foo[bad]=baz&foo[]=bar&foo[]=foo")).to.deep.equal({foo:{bad:"baz",0:"bar",1:"foo"}},{prototype:!1});expect(Qs.parse("foo[0][a]=a&foo[0][b]=b&foo[1][a]=aa&foo[1][b]=bb")).to.deep.equal({foo:[{a:"a",b:"b"},{a:"aa",b:"bb"}]},{prototype:!1});expect(Qs.parse("a[]=b&a[t]=u&a[hasOwnProperty]=c")).to.deep.equal({a:{0:"b",t:"u",hasOwnProperty:"c"}},{prototype:!1});expect(Qs.parse("a[]=b&a[hasOwnProperty]=c&a[x]=y")).to.deep.equal({a:{0:"b",hasOwnProperty:"c",x:"y"}},
{prototype:!1});a()});it("transforms arrays to objects (dot notation)",function(a){expect(Qs.parse("foo[0].baz=bar&fool.bad=baz")).to.deep.equal({foo:[{baz:"bar"}],fool:{bad:"baz"}},{prototype:!1});expect(Qs.parse("foo[0].baz=bar&fool.bad.boo=baz")).to.deep.equal({foo:[{baz:"bar"}],fool:{bad:{boo:"baz"}}},{prototype:!1});expect(Qs.parse("foo[0][0].baz=bar&fool.bad=baz")).to.deep.equal({foo:[[{baz:"bar"}]],fool:{bad:"baz"}},{prototype:!1});expect(Qs.parse("foo[0].baz[0]=15&foo[0].bar=2")).to.deep.equal({foo:[{baz:["15"],
bar:"2"}]},{prototype:!1});expect(Qs.parse("foo[0].baz[0]=15&foo[0].baz[1]=16&foo[0].bar=2")).to.deep.equal({foo:[{baz:["15","16"],bar:"2"}]},{prototype:!1});expect(Qs.parse("foo.bad=baz&foo[0]=bar")).to.deep.equal({foo:{bad:"baz",0:"bar"}},{prototype:!1});expect(Qs.parse("foo.bad=baz&foo[]=bar")).to.deep.equal({foo:{bad:"baz",0:"bar"}},{prototype:!1});expect(Qs.parse("foo[]=bar&foo.bad=baz")).to.deep.equal({foo:{0:"bar",bad:"baz"}},{prototype:!1});expect(Qs.parse("foo.bad=baz&foo[]=bar&foo[]=foo")).to.deep.equal({foo:{bad:"baz",
0:"bar",1:"foo"}},{prototype:!1});expect(Qs.parse("foo[0].a=a&foo[0].b=b&foo[1].a=aa&foo[1].b=bb")).to.deep.equal({foo:[{a:"a",b:"b"},{a:"aa",b:"bb"}]},{prototype:!1});a()});it("can add keys to objects",function(a){expect(Qs.parse("a[b]=c&a=d")).to.deep.equal({a:{b:"c",d:!0}},{prototype:!1});a()});it("correctly prunes undefined values when converting an array to an object",function(a){expect(Qs.parse("a[2]=b&a[99999999]=c")).to.deep.equal({a:{2:"b",99999999:"c"}},{prototype:!1});a()});it("supports malformed uri characters",
function(a){expect(Qs.parse("{%:%}",{strictNullHandling:!0})).to.deep.equal({"{%:%}":null},{prototype:!1});expect(Qs.parse("{%:%}=")).to.deep.equal({"{%:%}":""},{prototype:!1});expect(Qs.parse("foo=%:%}")).to.deep.equal({foo:"%:%}"},{prototype:!1});a()});it("doesn't produce empty keys",function(a){expect(Qs.parse("_r=1&")).to.deep.equal({_r:"1"},{prototype:!1});a()});it("cannot access Object prototype",function(a){Qs.parse("constructor[prototype][bad]=bad");Qs.parse("bad[constructor][prototype][bad]=bad");
expect(typeof Object.prototype.bad).to.equal("undefined");a()});it("parses arrays of objects",function(a){expect(Qs.parse("a[][b]=c")).to.deep.equal({a:[{b:"c"}]},{prototype:!1});expect(Qs.parse("a[0][b]=c")).to.deep.equal({a:[{b:"c"}]},{prototype:!1});a()});it("allows for empty strings in arrays",function(a){expect(Qs.parse("a[]=b&a[]=&a[]=c")).to.deep.equal({a:["b","","c"]},{prototype:!1});expect(Qs.parse("a[0]=b&a[1]&a[2]=c&a[19]=",{strictNullHandling:!0})).to.deep.equal({a:["b",null,"c",""]},
{prototype:!1});expect(Qs.parse("a[0]=b&a[1]=&a[2]=c&a[19]",{strictNullHandling:!0})).to.deep.equal({a:["b","","c",null]},{prototype:!1});expect(Qs.parse("a[]=&a[]=b&a[]=c")).to.deep.equal({a:["","b","c"]},{prototype:!1});a()});it("compacts sparse arrays",function(a){expect(Qs.parse("a[10]=1&a[2]=2")).to.deep.equal({a:["2","1"]},{prototype:!1});a()});it("parses semi-parsed strings",function(a){expect(Qs.parse({"a[b]":"c"})).to.deep.equal({a:{b:"c"}},{prototype:!1});expect(Qs.parse({"a[b]":"c","a[d]":"e"})).to.deep.equal({a:{b:"c",
d:"e"}},{prototype:!1});a()});it("parses buffers correctly",function(a){var b=new Buffer("test");expect(Qs.parse({a:b})).to.deep.equal({a:b},{prototype:!1});a()});it("continues parsing when no parent is found",function(a){expect(Qs.parse("[]=&a=b")).to.deep.equal({0:"",a:"b"},{prototype:!1});expect(Qs.parse("[]&a=b",{strictNullHandling:!0})).to.deep.equal({0:null,a:"b"},{prototype:!1});expect(Qs.parse("[foo]=bar")).to.deep.equal({foo:"bar"},{prototype:!1});a()});it("does not error when parsing a very long array",
function(a){for(var b="a[]=a";131072>Buffer.byteLength(b);)b+="&"+b;expect(function(){Qs.parse(b)}).to.not["throw"]();a()});it("should not throw when a native prototype has an enumerable property",{parallel:!1},function(a){Object.prototype.crash="";Array.prototype.crash="";expect(Qs.parse.bind(null,"a=b")).to.not["throw"]();expect(Qs.parse("a=b")).to.deep.equal({a:"b"},{prototype:!1});expect(Qs.parse.bind(null,"a[][b]=c")).to.not["throw"]();expect(Qs.parse("a[][b]=c")).to.deep.equal({a:[{b:"c"}]},
{prototype:!1});delete Object.prototype.crash;delete Array.prototype.crash;a()});it("parses a string with an alternative string delimiter",function(a){expect(Qs.parse("a=b;c=d",{delimiter:";"})).to.deep.equal({a:"b",c:"d"},{prototype:!1});a()});it("parses a string with an alternative RegExp delimiter",function(a){expect(Qs.parse("a=b; c=d",{delimiter:/[;,] */})).to.deep.equal({a:"b",c:"d"},{prototype:!1});a()});it("does not use non-splittable objects as delimiters",function(a){expect(Qs.parse("a=b&c=d",
{delimiter:!0})).to.deep.equal({a:"b",c:"d"},{prototype:!1});a()});it("allows overriding parameter limit",function(a){expect(Qs.parse("a=b&c=d",{parameterLimit:1})).to.deep.equal({a:"b"},{prototype:!1});a()});it("allows setting the parameter limit to Infinity",function(a){expect(Qs.parse("a=b&c=d",{parameterLimit:Infinity})).to.deep.equal({a:"b",c:"d"},{prototype:!1});a()});it("allows overriding array limit",function(a){expect(Qs.parse("a[0]=b",{arrayLimit:-1})).to.deep.equal({a:{0:"b"}},{prototype:!1});
expect(Qs.parse("a[-1]=b",{arrayLimit:-1})).to.deep.equal({a:{"-1":"b"}},{prototype:!1});expect(Qs.parse("a[0]=b&a[1]=c",{arrayLimit:0})).to.deep.equal({a:{0:"b",1:"c"}},{prototype:!1});a()});it("allows disabling array parsing",function(a){expect(Qs.parse("a[0]=b&a[1]=c",{parseArrays:!1})).to.deep.equal({a:{0:"b",1:"c"}},{prototype:!1});a()});it("parses an object",function(a){var b=Qs.parse({"user[name]":{"pop[bob]":3},"user[email]":null});expect(b).to.deep.equal({user:{name:{"pop[bob]":3},email:null}},
{prototype:!1});a()});it("parses an object in dot notation",function(a){var b=Qs.parse({"user.name":{"pop[bob]":3},"user.email.":null});expect(b).to.deep.equal({user:{name:{"pop[bob]":3},email:null}},{prototype:!1});a()});it("parses an object and not child values",function(a){var b=Qs.parse({"user[name]":{"pop[bob]":{test:3}},"user[email]":null});expect(b).to.deep.equal({user:{name:{"pop[bob]":{test:3}},email:null}},{prototype:!1});a()});it("does not blow up when Buffer global is missing",function(a){var b=
global.Buffer;delete global.Buffer;var c=Qs.parse("a=b&c=d");global.Buffer=b;expect(c).to.deep.equal({a:"b",c:"d"},{prototype:!1});a()});it("does not crash when parsing circular references",function(a){var b={};b.b=b;var c;expect(function(){c=Qs.parse({"foo[bar]":"baz","foo[baz]":b})}).to.not["throw"]();expect(c).to.contain("foo");expect(c.foo).to.contain("bar","baz");expect(c.foo.bar).to.equal("baz");expect(c.foo.baz).to.deep.equal(b,{prototype:!1});a()});it("parses plain objects correctly",function(a){var b=
Object.create(null);b.b="c";expect(Qs.parse(b)).to.deep.equal({b:"c"},{prototype:!1});var c=Qs.parse({a:b});expect(c).to.contain("a");expect(c.a).to.deep.equal(b,{prototype:!1});a()});it("parses dates correctly",function(a){var b=new Date;expect(Qs.parse({a:b})).to.deep.equal({a:b},{prototype:!1});a()});it("parses regular expressions correctly",function(a){var b=/^test$/;expect(Qs.parse({a:b})).to.deep.equal({a:b},{prototype:!1});a()})}); //# sourceMappingURL=parse.js.map
