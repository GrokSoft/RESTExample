var test=require("tap").test,BerReader;test("load library",function(b){BerReader=require("../../lib/index").BerReader;b.ok(BerReader);try{new BerReader,b.fail("Should have thrown")}catch(a){b.ok(a instanceof TypeError,"Should have been a type error")}b.end()});test("read byte",function(b){var a=new BerReader(new Buffer([222]));b.ok(a);b.equal(a.readByte(),222,"wrong value");b.end()});
test("read 1 byte int",function(b){var a=new BerReader(new Buffer([2,1,3]));b.ok(a);b.equal(a.readInt(),3,"wrong value");b.equal(a.length,1,"wrong length");b.end()});test("read 2 byte int",function(b){var a=new BerReader(new Buffer([2,2,126,222]));b.ok(a);b.equal(a.readInt(),32478,"wrong value");b.equal(a.length,2,"wrong length");b.end()});
test("read 3 byte int",function(b){var a=new BerReader(new Buffer([2,3,126,222,3]));b.ok(a);b.equal(a.readInt(),8314371,"wrong value");b.equal(a.length,3,"wrong length");b.end()});test("read 4 byte int",function(b){var a=new BerReader(new Buffer([2,4,126,222,3,1]));b.ok(a);b.equal(a.readInt(),2128478977,"wrong value");b.equal(a.length,4,"wrong length");b.end()});
test("read boolean true",function(b){var a=new BerReader(new Buffer([1,1,255]));b.ok(a);b.equal(a.readBoolean(),!0,"wrong value");b.equal(a.length,1,"wrong length");b.end()});test("read boolean false",function(b){var a=new BerReader(new Buffer([1,1,0]));b.ok(a);b.equal(a.readBoolean(),!1,"wrong value");b.equal(a.length,1,"wrong length");b.end()});
test("read enumeration",function(b){var a=new BerReader(new Buffer([10,1,32]));b.ok(a);b.equal(a.readEnumeration(),32,"wrong value");b.equal(a.length,1,"wrong length");b.end()});test("read string",function(b){var a=new Buffer(23);a[0]=4;a[1]=Buffer.byteLength("cn=foo,ou=unit,o=test");a.write("cn=foo,ou=unit,o=test",2);a=new BerReader(a);b.ok(a);b.equal(a.readString(),"cn=foo,ou=unit,o=test","wrong value");b.equal(a.length,21,"wrong length");b.end()});
test("read sequence",function(b){var a=new BerReader(new Buffer([48,3,1,1,255]));b.ok(a);b.equal(a.readSequence(),48,"wrong value");b.equal(a.length,3,"wrong length");b.equal(a.readBoolean(),!0,"wrong value");b.equal(a.length,1,"wrong length");b.end()});
test("anonymous LDAPv3 bind",function(b){var a=new Buffer(14);a[0]=48;a[1]=12;a[2]=2;a[3]=1;a[4]=4;a[5]=96;a[6]=7;a[7]=2;a[8]=1;a[9]=3;a[10]=4;a[11]=0;a[12]=128;a[13]=0;a=new BerReader(a);b.equal(a.readSequence(),48,"Not an ASN.1 Sequence");b.equal(a.length,12,"Message length should be 12");b.equal(a.readInt(),4,"Message id should have been 4");b.equal(a.readSequence(),96,"Bind Request should have been 96");b.equal(a.length,7,"Bind length should have been 7");b.equal(a.readInt(),3,"LDAP version should have been 3");
b.equal(a.readString(),"","Bind DN should have been empty");b.equal(a.length,0,"string length should have been 0");b.equal(a.readByte(),128,"Should have been ContextSpecific (choice)");b.equal(a.readByte(),0,"Should have been simple bind");b.equal(null,a.readByte(),"Should be out of data");b.end()});
test("long string",function(b){var a=new Buffer(256);a[0]=4;a[1]=129;a[2]=148;a.write("2;649;CN=Red Hat CS 71GA Demo,O=Red Hat CS 71GA Demo,C=US;CN=RHCS Agent - admin01,UID=admin01,O=redhat,C=US [1] This is Teena Vradmin's description.",3);a=new BerReader(a.slice(0,151));b.equal(a.readString(),"2;649;CN=Red Hat CS 71GA Demo,O=Red Hat CS 71GA Demo,C=US;CN=RHCS Agent - admin01,UID=admin01,O=redhat,C=US [1] This is Teena Vradmin's description.");b.end()}); //# sourceMappingURL=reader.test.js.map
