var assert=require("assert"),tls=require("tls"),net=require("net"),https=require("https"),transport=require("spdy-transport"),util=require("util"),fixtures=require("./fixtures"),spdy=require("../");
describe("SPDY Server",function(){fixtures.everyConfig(function(l,k,h,f){var d,g;beforeEach(function(e){d=spdy.createServer(util._extend({spdy:{"x-forwarded-for":!0,plain:f}},fixtures.keys));d.listen(fixtures.port,function(){var c=(f?net:tls).connect({rejectUnauthorized:!1,port:fixtures.port,NPNProtocols:[k]},function(){g=transport.connection.create(c,{protocol:l,isServer:!1});g.start(h);e()})})});afterEach(function(e){g.socket.destroy();d.close(e)});it("should process GET request",function(e){var c=
g.request({method:"GET",path:"/get",headers:{a:"b"}},function(a){assert(!a);c.on("response",function(a,m){assert.equal(a,200);assert.equal(m.ok,"yes");fixtures.expectData(c,"response",e)});c.end()});d.on("request",function(a,b){assert.equal(a.isSpdy,b.isSpdy);assert.equal(a.spdyVersion,b.spdyVersion);assert(a.isSpdy);f||(assert(a.socket.encrypted),assert(a.socket.getPeerCertificate()));3.1===h?assert(3<=a.spdyVersion&&3.1>=a.spdyVersion):assert.equal(a.spdyVersion,h);assert(a.spdyStream);assert(b.spdyStream);
assert.equal(a.method,"GET");assert.equal(a.url,"/get");assert.deepEqual(a.headers,{a:"b",host:"localhost"});a.on("end",function(){b.writeHead(200,{ok:"yes"});b.end("response")});a.resume()})});it("should process POST request",function(e){function c(){if(0===--b)return e()}var a=g.request({method:"POST",path:"/post"},function(b){assert(!b);a.on("response",function(b,e){assert.equal(b,200);assert.equal(e.ok,"yes");fixtures.expectData(a,"response",c)});a.end("request")});d.on("request",function(a,b){assert.equal(a.method,
"POST");assert.equal(a.url,"/post");b.writeHead(200,{ok:"yes"});b.end("response");fixtures.expectData(a,"request",c)});var b=2});it("should process expect-continue request",function(e){var c=g.request({method:"GET",path:"/get",headers:{Expect:"100-continue"}},function(a){assert(!a);c.on("response",function(a,d){assert.equal(a,100);fixtures.expectData(c,"response",e)});c.end()});d.on("request",function(a,b){a.on("end",function(){b.end("response")});a.resume()})});it("should emit `checkContinue` request",
function(e){var c=g.request({method:"GET",path:"/get",headers:{Expect:"100-continue"}},function(a){assert(!a);c.on("response",function(a,d){assert.equal(a,100);fixtures.expectData(c,"response",e)});c.end()});d.on("checkContinue",function(a,b){a.on("end",function(){b.writeContinue();b.end("response")});a.resume()})});it("should send PUSH_PROMISE",function(e){function c(){if(0===--b)return e()}var a=g.request({method:"POST",path:"/page"},function(b){assert(!b);a.on("pushPromise",function(b){assert.equal(b.path,
"/push");assert.equal(b.headers.yes,"push");fixtures.expectData(b,"push",c);fixtures.expectData(a,"response",c)});a.end("request")});d.on("request",function(a,b){assert.equal(a.method,"POST");assert.equal(a.url,"/page");b.writeHead(200,{ok:"yes"});b.push("/push",{request:{yes:"push"}}).end("push");b.end("response");fixtures.expectData(a,"request",c)});var b=3});it("should receive trailing headers",function(e){var c=g.request({method:"POST",path:"/post"},function(a){assert(!a);c.sendHeaders({trai:"ler"});
c.end();c.on("response",function(a,d){assert.equal(a,200);assert.equal(d.ok,"yes");fixtures.expectData(c,"response",e)})});d.on("request",function(a,b){var c=!1;a.on("trailers",function(a){c=!0;assert.equal(a.trai,"ler")});a.on("end",function(){assert(c);b.writeHead(200,{ok:"yes"});b.end("response")});a.resume()})});it("should call .writeHead() automatically",function(e){var c=g.request({method:"POST",path:"/post"},function(a){assert(!a);c.on("response",function(a,d){assert.equal(a,300);fixtures.expectData(c,
"response",e)});c.end()});d.on("request",function(a,b){a.on("end",function(){b.statusCode=300;b.end("response")});a.resume()})});it("should not crash on .writeHead() after socket close",function(e){var c=g.request({method:"POST",path:"/post"},function(a){assert(!a);setTimeout(function(){g.socket.destroy()},50);c.on("error",function(){});c.end()});d.on("request",function(a,b){a.connection.on("close",function(){assert.doesNotThrow(function(){b.writeHead(200);b.end("response")});e()})})});it("should not crash on .push() after socket close",
function(e){var c=g.request({method:"POST",path:"/post"},function(a){assert(!a);setTimeout(function(){g.socket.destroy()},50);c.on("error",function(){});c.end()});d.on("request",function(a,b){a.connection.on("close",function(){assert.doesNotThrow(function(){assert.equal(b.push("/push",{}),void 0);b.end("response")});e()})})});it("should end response after writing everything down",function(e){var c=g.request({method:"GET",path:"/post"},function(a){assert(!a);c.on("response",function(a,d){assert.equal(a,
200);fixtures.expectData(c,"hello world, what's up?",e)});c.end()});d.on("request",function(a,b){a.resume();b.writeHead(200);b.write("hello ");b.write("world");b.write(", what's");b.write(" up?");b.end()})});it("should handle x-forwarded-for",function(e){g.sendXForwardedFor("1.2.3.4");var c=g.request({method:"GET",path:"/post"},function(a){assert(!a);c.resume();c.on("end",e);c.end()});d.on("request",function(a,b){assert.equal(a.headers["x-forwarded-for"],"1.2.3.4");a.resume();b.end()})})});it("should respond to http/1.1",
function(l){var k=spdy.createServer(fixtures.keys,function(h,f){assert.equal(h.isSpdy,f.isSpdy);assert.equal(h.spdyVersion,f.spdyVersion);assert(!h.isSpdy);assert.equal(h.spdyVersion,1);f.writeHead(200);f.end()});k.listen(fixtures.port,function(){https.request({agent:!1,rejectUnauthorized:!1,NPNProtocols:["http/1.1"],port:fixtures.port,method:"GET",path:"/"},function(h){assert.equal(h.statusCode,200);h.resume();h.on("end",function(){k.close(l)})}).end()})});it("should support custom base",function(l){function k(f,
d){https.Server.call(this,f,d)}util.inherits(k,https.Server);var h=spdy.createServer(k,fixtures.keys,function(f,d){assert.equal(f.isSpdy,d.isSpdy);assert.equal(f.spdyVersion,d.spdyVersion);assert(!f.isSpdy);assert.equal(f.spdyVersion,1);d.writeHead(200);d.end()});h.listen(fixtures.port,function(){https.request({agent:!1,rejectUnauthorized:!1,NPNProtocols:["http/1.1"],port:fixtures.port,method:"GET",path:"/"},function(f){assert.equal(f.statusCode,200);f.resume();f.on("end",function(){h.close(l)})}).end()})})}); //# sourceMappingURL=server-test.js.map
