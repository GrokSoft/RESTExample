var assert=require("assert"),OffsetBuffer=require("../");
describe("OffsetBuffer",function(){var a;beforeEach(function(){a=new OffsetBuffer});describe(".take()",function(){it("should return empty buffer",function(){var b=new Buffer("hello world");a.push(b);var c=a.take(0);assert.equal(c.length,0);assert.equal(a.size,b.length)});it("should return the first buffer itself",function(){var b=new Buffer("hello world");a.push(b);var c=a.take(b.length);assert(c===b);assert(a.isEmpty())});it("should return the slice of the buffer ",function(){var b=new Buffer("hello world");
a.push(b);assert.equal(a.take(5).toString(),"hello");assert.equal(a.take(1).toString()," ");assert.equal(a.take(5).toString(),"world");assert(a.isEmpty())});it("should concat buffers",function(){a.push(new Buffer("hello"));a.push(new Buffer(" "));a.push(new Buffer("world!"));assert.equal(a.take(11).toString(),"hello world");assert.equal(a.take(1).toString(),"!");assert(a.isEmpty())})});describe(".skip",function(){it("should skip bytes",function(){a.push(new Buffer("hello "));a.push(new Buffer("world"));
a.push(new Buffer(" oh gosh"));assert.equal(a.take(2).toString(),"he");a.skip(1);assert.equal(a.take(2).toString(),"lo");a.skip(1);assert.equal(a.take(2).toString(),"wo");a.skip(4);assert.equal(a.take(7).toString(),"oh gosh");assert(a.isEmpty())})});describe(".peekUInt8",function(){it("should return and not move by one byte",function(){a.push(new Buffer([1,2]));assert.equal(a.peekUInt8(),1);assert.equal(a.readUInt8(),1);assert.equal(a.peekUInt8(),2);assert.equal(a.readUInt8(),2);assert(a.isEmpty())})});
describe(".peekInt8",function(){it("should return signed number",function(){a.push(new Buffer([128]));assert.equal(a.peekInt8(),-128);assert.equal(a.readInt8(),-128);assert(a.isEmpty())})});describe(".readUInt8",function(){it("should return and move by one byte",function(){a.push(new Buffer([1,2]));a.push(new Buffer([3,4]));assert.equal(a.readUInt8(),1);assert.equal(a.readUInt8(),2);assert.equal(a.readUInt8(),3);assert.equal(a.readUInt8(),4);assert(a.isEmpty())})});describe(".readInt8",function(){it("should return signed number",
function(){a.push(new Buffer([143,127]));assert.equal(a.readInt8(),-113);assert.equal(a.readInt8(),127);assert(a.isEmpty())})});describe(".readUInt16LE",function(){it("should return and move by two bytes",function(){a.push(new Buffer([1,2,3]));a.push(new Buffer([4,5,6]));assert.equal(a.readUInt16LE(),513);assert.equal(a.readUInt16LE(),1027);assert.equal(a.readUInt16LE(),1541);assert(a.isEmpty())});it("should return and move by two bytes (regression #1)",function(){a.push(new Buffer([1]));a.push(new Buffer([2,
3,4]));assert.equal(a.readUInt16LE(),513);assert.equal(a.readUInt16LE(),1027);assert(a.isEmpty())})});describe(".readInt16LE",function(){it("should return signed number",function(){a.push(new Buffer([35,129]));assert.equal(a.readInt16LE(),-32477);assert(a.isEmpty())})});describe(".readUInt24LE",function(){it("should return and move by three bytes",function(){a.push(new Buffer([1,2,3,4,5]));a.push(new Buffer([6,7]));a.push(new Buffer([8,9]));assert.equal(a.readUInt24LE(),197121);assert.equal(a.readUInt24LE(),
394500);assert.equal(a.readUInt24LE(),591879);assert(a.isEmpty())});it("should return and move by three bytes (regression #1)",function(){a.push(new Buffer([1,2]));a.push(new Buffer([3]));assert.equal(a.readUInt24LE(),197121);assert.equal(a.buffers.length,0);assert(a.isEmpty())})});describe(".readInt24LE",function(){it("should return signed number",function(){a.push(new Buffer([35,69,129]));assert.equal(a.readInt24LE(),-8305373);assert(a.isEmpty())})});describe(".readUInt32LE",function(){it("should return and move by four bytes",
function(){a.push(new Buffer([1,2,3,4,5,6,7]));a.push(new Buffer([8,9,10]));a.push(new Buffer([11,12,13]));a.push(new Buffer([14,15,16]));assert.equal(a.readUInt32LE(),67305985);assert.equal(a.readUInt32LE(),134678021);assert.equal(a.readUInt32LE(),202050057);assert.equal(a.readUInt32LE(),269422093);assert(a.isEmpty())});it("should return and move by four bytes (regression #1)",function(){a.push(new Buffer([1,2,3]));a.push(new Buffer([4]));assert.equal(a.readUInt32LE(),67305985);assert.equal(a.buffers.length,
0);assert(a.isEmpty())})});describe(".readInt32LE",function(){it("should return signed number",function(){a.push(new Buffer([255,255,255,255]));assert.equal(a.readInt32LE(),-1);assert(a.isEmpty())})});describe(".readUInt16BE",function(){it("should return and move by two bytes",function(){a.push(new Buffer([1,2,3]));a.push(new Buffer([4,5,6]));assert.equal(a.readUInt16BE(),258);assert.equal(a.readUInt16BE(),772);assert.equal(a.readUInt16BE(),1286);assert(a.isEmpty())})});describe(".readInt16BE",function(){it("should return signed number",
function(){a.push(new Buffer([129,35]));assert.equal(a.readInt16BE(),-32477);assert(a.isEmpty())})});describe(".readUInt24BE",function(){it("should return and move by three bytes",function(){a.push(new Buffer([1,2,3,4,5]));a.push(new Buffer([6,7]));a.push(new Buffer([8,9]));assert.equal(a.readUInt24BE(),66051);assert.equal(a.readUInt24BE(),263430);assert.equal(a.readUInt24BE(),460809);assert(a.isEmpty())})});describe(".readInt24BE",function(){it("should return signed number",function(){a.push(new Buffer([129,
69,35]));assert.equal(a.readInt24BE(),-8305373);assert(a.isEmpty())})});describe(".readUInt32BE",function(){it("should return and move by four bytes",function(){a.push(new Buffer([1,2,3,4,5,6,7]));a.push(new Buffer([8,9,10]));a.push(new Buffer([11,12,13]));a.push(new Buffer([14,15,16]));assert.equal(a.readUInt32BE(),16909060);assert.equal(a.readUInt32BE(),84281096);assert.equal(a.readUInt32BE(),151653132);assert.equal(a.readUInt32BE(),219025168);assert(a.isEmpty())});it("should return positive values",
function(){a.push(new Buffer([255,255,255,255]));assert.equal(a.readUInt32BE(),4294967295);assert(a.isEmpty())})});describe(".readInt32BE",function(){it("should return signed number",function(){a.push(new Buffer([255,255,255,255]));assert.equal(a.readInt32BE(),-1);assert(a.isEmpty())})});describe(".has",function(){it("should properly check the amount of the remaining bytes",function(){a.push(new Buffer([1,2,3]));assert(a.has(3));assert.equal(a.readUInt8(),1);assert(!a.has(3));assert(a.has(2));assert.equal(a.readUInt16BE(),
515);assert(!a.has(1))})})}); //# sourceMappingURL=buffer-test.js.map
