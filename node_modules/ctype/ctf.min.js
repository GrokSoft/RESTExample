var mod_assert=require("assert"),ASSERT=mod_assert.ok,ctf_versions=["1.0"],ctf_entries=["integer","float","typedef","struct"],ctf_deftypes="int8_t uint8_t int16_t uint16_t int32_t uint32_t float double".split(" ");
function ctfParseInteger(b,f){var c,a,e,d;c=b.name;if(!("signed"in b.integer))throw Error("Malformed CTF JSON: integer missing signed value");if(!("length"in b.integer))throw Error("Malformed CTF JSON: integer missing length value");a=b.integer.signed;e=b.integer.length;d=null;a&&1==e?d="int8_t":1==e?d="uint8_t":a&&2==e?d="int16_t":2==e?d="uint16_t":a&&4==e?d="int32_t":4==e?d="uint32_t":a&&8==e?d="int64_t":8==e&&(d="uint64_t");if(null===d)throw Error("Malformed CTF JSON: integer has unsupported length and sign - "+
e+"/"+a);c!=d&&("char"==c?ASSERT("int8_t"==d):f.typedef(c,d))}function ctfParseFloat(b,f){var c,a;c=b.name;if(!("length"in b["float"]))throw Error("Malformed CTF JSON: float missing length value");a=b["float"].length;if(4!=a&&8!=a)throw Error("Malformed CTF JSON: float has invalid length value");4==a?"float"!=c&&f.typedef(c,"float"):8==a&&"double"!=c&&f.typedef(c,"double")}
function ctfParseTypedef(b,f){var c,a,e;c=b.name;if("string"!=typeof b.typedef)throw Error("Malformed CTF JSON: typedef value in not a string");a=b.typedef;for(e=0;e<ctf_deftypes.length;e++)if(c==ctf_deftypes[e])return;f.typedef(c,a)}
function ctfParseStruct(b,f){var c,a,e,d,g;g=[];if(!Array.isArray(b.struct))throw Error("Malformed CTF JSON: struct value is not an array");for(e=0;e<b.struct.length;e++){a=b.struct[e];if(!("name"in a))throw Error("Malformed CTF JSON: struct member missing name");if(!("type"in a))throw Error("Malformed CTF JSON: struct member missing type");if("string"!=typeof a.name)throw Error("Malformed CTF JSON: struct member name isn't a string");if("string"!=typeof a.type)throw Error("Malformed CTF JSON: struct member type isn't a string");
c=a.name;a=a.type;d=a.indexOf(" [");-1!=d&&(a=a.substring(0,d)+a.substring(d+1,a.length));d={};d[c]={type:a};g.push(d)}c=b.name;f.typedef(c,g)}
function ctfParseEntry(b,f){var c,a;if(!("name"in b))throw Error('Malformed CTF JSON: entry missing "name" section');for(c=0;c<ctf_entries.length;c++)ctf_entries[c]in b&&a++;if(0===a)throw Error("Malformed CTF JSON: found no entries");if(2<=a)throw Error("Malformed CTF JSON: found more than one entry");"integer"in b?ctfParseInteger(b,f):"float"in b?ctfParseFloat(b,f):"typedef"in b?ctfParseTypedef(b,f):"struct"in b?ctfParseStruct(b,f):ASSERT(!1,"shouldn't reach here")}
function ctfParseJson(b,f){var c,a;ASSERT(b);ASSERT(f);if(!("metadata"in b))throw Error("Invalid CTF JSON: missing metadata section");if(!("ctf2json_version"in b.metadata))throw Error("Invalid CTF JSON: missing ctf2json_version");c=b.metadata.ctf2json_version;for(a=0;a<ctf_versions.length&&ctf_versions[a]!=c;a++);if(a==ctf_versions.length)throw Error("Unsuported ctf2json_version: "+c);if(!("data"in b))throw Error("Invalid CTF JSON: missing data section");if(!Array.isArray(b.data))throw Error("Malformed CTF JSON: data section is not an array");
for(a=0;a<b.data.length;a++)ctfParseEntry(b.data[a],f)}exports.ctfParseJson=ctfParseJson; //# sourceMappingURL=ctf.js.map
