var assert=require("assert"),fs=require("fs"),path=require("path"),rimraf=require("rimraf"),readDirFiles=require("read-dir-files"),util=require("util"),ncp=require("../").ncp;
describe("ncp",function(){describe("regular files and directories",function(){var e=path.join(__dirname,"regular-fixtures"),d=path.join(e,"src"),b=path.join(e,"out");before(function(c){rimraf(b,function(){ncp(d,b,c)})});describe("when copying a directory of files",function(){it("files are copied correctly",function(c){readDirFiles(d,"utf8",function(a,d){readDirFiles(b,"utf8",function(b,e){assert.ifError(a);assert.deepEqual(d,e);c()})})})});describe("when copying files using filter",function(){before(function(c){var a=
function(a){return"a"!=a.substr(a.length-1)};rimraf(b,function(){ncp(d,b,{filter:a},c)})});it("files are copied correctly",function(c){readDirFiles(d,"utf8",function(a,d){function e(a){for(var c in a){var b=a[c];if(b instanceof Object)return e(b);"a"==c.substr(c.length-1)&&delete a[c]}}e(d);readDirFiles(b,"utf8",function(a,b){assert.ifError(a);assert.deepEqual(d,b);c()})})})});describe("when using clobber=false",function(){it("the copy is completed successfully",function(c){ncp(d,b,function(){ncp(d,
b,{clobber:!1},function(a){assert.ifError(a);c()})})})});describe("when using transform",function(){it("file descriptors are passed correctly",function(c){ncp(d,b,{transform:function(a,c,b){assert.notEqual(b.name,void 0);assert.strictEqual(typeof b.mode,"number");a.pipe(c)}},c)})});describe("when using rename",function(){it("output files are correctly redirected",function(c){ncp(d,b,{rename:function(a){return"a"==path.basename(a)?path.resolve(path.dirname(a),"z"):a}},function(a){if(a)return c(a);
readDirFiles(d,"utf8",function(a,d){readDirFiles(b,"utf8",function(b,e){assert.ifError(a);assert.deepEqual(d.a,e.z);c()})})})})})});describe("symlink handling",function(){var e=path.join(__dirname,"symlink-fixtures"),d=path.join(e,"src"),b=path.join(e,"out");beforeEach(function(c){rimraf(b,c)});it("copies symlinks by default",function(c){ncp(d,b,function(a){if(a)return c(a);assert.equal(fs.readlinkSync(path.join(b,"file-symlink")),"foo");assert.equal(fs.readlinkSync(path.join(b,"dir-symlink")),"dir");
c()})});it("copies file contents when dereference=true",function(c){ncp(d,b,{dereference:!0},function(a){a=path.join(b,"file-symlink");assert.ok(fs.lstatSync(a).isFile());assert.equal(fs.readFileSync(a),"foo contents");a=path.join(b,"dir-symlink");assert.ok(fs.lstatSync(a).isDirectory());assert.deepEqual(fs.readdirSync(a),["bar"]);c()})})});describe("broken symlink handling",function(){var e=path.join(__dirname,"broken-symlink-fixtures"),d=path.join(e,"src"),b=path.join(e,"out");beforeEach(function(c){rimraf(b,
c)});it("copies broken symlinks by default",function(c){ncp(d,b,function(a){if(a)return c(a);assert.equal(fs.readlinkSync(path.join(b,"broken-symlink")),"does-not-exist");c()})});it("returns an error when dereference=true",function(c){ncp(d,b,{dereference:!0},function(a){assert.equal(a.length,1);assert.equal(a[0].code,"ENOENT");c()})})});describe("modified files copies",function(){var e=path.join(__dirname,"modified-files"),d=path.join(e,"src"),b=path.join(e,"out");it("if file not exists copy file to target",
function(c){rimraf(b,function(){ncp(d,b,{modified:!0,clobber:!1},function(a){assert.equal(fs.existsSync(b),!0);c()})})});it("change source file mtime and copy",function(c){fs.utimesSync(d+"/a",(new Date).getTime()/1E3,(new Date("2015-01-01 00:00:00")).getTime()/1E3);ncp(d,b,{modified:!0,clobber:!1},function(a){fs.stat(b+"/a",function(a,b){assert.equal(b.mtime.getTime(),(new Date("2015-01-01 00:00:00")).getTime());c()})})})})}); //# sourceMappingURL=ncp.js.map
